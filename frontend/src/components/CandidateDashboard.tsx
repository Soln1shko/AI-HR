import React from 'react';
import { getCandidateTopicAnalytics } from '../utils/interviewAnalytics';
import { TopicAnalyticsDashboard } from './TopicCharts';

interface CandidateDashboardProps {
  candidate: any;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–¥–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
const RadialProgress: React.FC<{ value: number; max: number; color: string; label: string }> = ({ 
  value, 
  max, 
  color, 
  label 
}) => {
  const percentage = Math.min((value / max) * 100, 100);
  const radius = 40;
  const circumference = 2 * Math.PI * radius;
  const strokeDasharray = circumference;
  const strokeDashoffset = circumference - (percentage / 100) * circumference;

  return (
    <div className="flex flex-col items-center">
      <div className="relative w-28 h-28">
        <svg className="w-28 h-28 transform -rotate-90" viewBox="0 0 100 100">
          {/* –§–æ–Ω–æ–≤—ã–π –∫—Ä—É–≥ */}
          <circle
            cx="50"
            cy="50"
            r={radius}
            stroke="currentColor"
            strokeWidth="8"
            fill="none"
            className="text-dark-600"
          />
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∫—Ä—É–≥ */}
          <circle
            cx="50"
            cy="50"
            r={radius}
            stroke="currentColor"
            strokeWidth="8"
            fill="none"
            strokeDasharray={strokeDasharray}
            strokeDashoffset={strokeDashoffset}
            strokeLinecap="round"
            className={`transition-all duration-1000 ease-out ${color}`}
          />
        </svg>
        {/* –¢–µ–∫—Å—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ */}
        <div className="absolute inset-0 flex items-center justify-center">
          <span className="text-sm font-bold text-white">{Math.round(percentage)}%</span>
        </div>
      </div>
      <span className="text-xs text-dark-300 mt-2 text-center">{label}</span>
    </div>
  );
};


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ü–µ–Ω–æ–∫ —Ä–µ—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
const translateVoiceScoreName = (scoreName: string): string => {
  const translations: Record<string, string> = {
    'confidence': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
    'stress_resistance': '–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', 
    'communication': '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
    'energy': '–≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å'
  };
  
  return translations[scoreName] || scoreName;
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
const VoiceAnalysisChart: React.FC<{ voiceAnalysis: any }> = ({ voiceAnalysis }) => {
  if (!voiceAnalysis) return null;

  const scores = voiceAnalysis.scores || {};
  const tags = voiceAnalysis.tags || [];

  return (
    <div className="space-y-4">
      {/* –û—Ü–µ–Ω–∫–∏ */}
      {Object.keys(scores).length > 0 && (
        <div>
          <h4 className="text-sm font-medium text-white mb-3">–û—Ü–µ–Ω–∫–∏ —Ä–µ—á–∏</h4>
          <div className="grid grid-cols-2 gap-3">
            {Object.entries(scores).map(([key, value]: [string, any]) => (
              <div key={key} className="bg-dark-700/30 p-3 rounded-lg">
                <div className="text-xs text-dark-400 mb-1">{translateVoiceScoreName(key)}</div>
                <div className="flex items-center">
                  <div className="flex-1 bg-dark-600 rounded-full h-2 mr-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        value >= 70 ? 'bg-green-500' : value >= 40 ? 'bg-yellow-500' : 'bg-red-500'
                      }`}
                      style={{ width: `${Math.min(value, 100)}%` }}
                    ></div>
                  </div>
                  <span className={`text-xs font-medium ${
                    value >= 70 ? 'text-green-400' : value >= 40 ? 'text-yellow-400' : 'text-red-400'
                  }`}>
                    {value}%
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –¢–µ–≥–∏ */}
      {tags.length > 0 && (
        <div>
          <h4 className="text-sm font-medium text-white mb-3">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–µ—á–∏</h4>
          <div className="flex flex-wrap gap-2">
            {tags.map((tag: string, index: number) => (
              <span 
                key={index}
                className="px-2 py-1 bg-accent-blue/20 text-accent-blue text-xs rounded-full border border-accent-blue/30"
              >
                {tag}
              </span>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

const CandidateDashboard: React.FC<CandidateDashboardProps> = ({ candidate }) => {
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
  console.log('CandidateDashboard –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:', {
    candidateName: candidate.user_name,
    hasInterviewAnalysis: !!candidate.interview_analysis,
    interviewAnalysisType: typeof candidate.interview_analysis,
    interviewAnalysisLength: candidate.interview_analysis ? candidate.interview_analysis.length : 0
  });

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥—ç—à–±–æ—Ä–¥–∞
  const resumeScore = candidate.resume_score || 0;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
  const extractScoreFromReport = (reportText: string): number => {
    if (!reportText) return 0;
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: XX.X%"
    const scoreMatch = reportText.match(/üéØ\s*–û–ë–©–ê–Ø\s*–û–¶–ï–ù–ö–ê:\s*(\d+(?:\.\d+)?)%/i);
    if (scoreMatch && scoreMatch[1]) {
      return parseFloat(scoreMatch[1]);
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ —ç–º–æ–¥–∑–∏
    const altScoreMatch = reportText.match(/–û–ë–©–ê–Ø\s*–û–¶–ï–ù–ö–ê:\s*(\d+(?:\.\d+)?)%/i);
    if (altScoreMatch && altScoreMatch[1]) {
      return parseFloat(altScoreMatch[1]);
    }
    
    return 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–±—â–µ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞
  const getOverallAssessment = (interviewAnalysis: any): string | null => {
    if (!interviewAnalysis) return null;
    
    // –ï—Å–ª–∏ interviewAnalysis - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç)
    if (typeof interviewAnalysis === 'string') {
      // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "üìÑ –û–ë–©–ê–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê:" –∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ
      const assessmentMatch = interviewAnalysis.match(/üìÑ –û–ë–©–ê–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê:\s*\n(.*?)(?=\n\n|‚úÖ|‚ö†Ô∏è|üîß|üîç|üö®|üìö|üíº|‚ö†Ô∏è|üöÄ|$)/s);
      if (assessmentMatch) {
        return assessmentMatch[1].trim();
      }
    }
    
    return null;
  };

  // –ü–æ–ª—É—á–∞–µ–º AI –æ—Ü–µ–Ω–∫—É –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ interview_analysis
  let aiInterviewScore = 0;
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
  if (candidate.interview_analysis?.final_score && candidate.interview_analysis.final_score > 0) {
    aiInterviewScore = candidate.interview_analysis.final_score;
  } else if (candidate.interview_analysis?.score && candidate.interview_analysis.score > 0) {
    aiInterviewScore = candidate.interview_analysis.score;
  } else if (candidate.interview_result?.final_score && candidate.interview_result.final_score > 0) {
    aiInterviewScore = candidate.interview_result.final_score;
  } else if (candidate.interview_result?.score && candidate.interview_result.score > 0) {
    aiInterviewScore = candidate.interview_result.score;
  } else {
    // –ï—Å–ª–∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –Ω–µ—Ç, –ø–∞—Ä—Å–∏–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
    const reportText = candidate.interview_result?.report || candidate.interview_analysis?.report || '';
    aiInterviewScore = extractScoreFromReport(reportText);
  }
  
  const answers = candidate.answers || [];
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –¥—ç—à–±–æ—Ä–¥–∞:', {
    candidate,
    resumeScore,
    aiInterviewScore,
    interview_result: candidate.interview_result,
    interview_analysis: candidate.interview_analysis,
    'interview_analysis.final_score': candidate.interview_analysis?.final_score,
    'interview_analysis.score': candidate.interview_analysis?.score,
    'report_text_preview': (candidate.interview_result?.report || candidate.interview_analysis?.report || '').substring(0, 200) + '...'
  });
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
  const calculateAverageVoiceAnalysis = (answers: any[]) => {
    if (!answers || answers.length === 0) return null;
    
    const validAnalyses = answers.filter((answer: any) => answer.voice_analysis);
    if (validAnalyses.length === 0) return null;
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏
    const allScores: Record<string, number[]> = {};
    const allTags: string[] = [];
    
    validAnalyses.forEach((answer: any) => {
      const analysis = answer.voice_analysis;
      
      // –°–æ–±–∏—Ä–∞–µ–º –æ—Ü–µ–Ω–∫–∏
      if (analysis.scores) {
        Object.entries(analysis.scores).forEach(([key, value]) => {
          if (!allScores[key]) allScores[key] = [];
          allScores[key].push(value as number);
        });
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏
      if (analysis.tags) {
        allTags.push(...analysis.tags);
      }
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const averageScores: Record<string, number> = {};
    Object.entries(allScores).forEach(([key, values]) => {
      averageScores[key] = Math.round(values.reduce((sum, val) => sum + val, 0) / values.length);
    });
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–µ–≥–æ–≤ –∏ —Å—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
    const tagFrequency: Record<string, number> = {};
    allTags.forEach(tag => {
      tagFrequency[tag] = (tagFrequency[tag] || 0) + 1;
    });
    
    // –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Ç–µ–≥–∏ (–±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤)
    const frequentTags = Object.entries(tagFrequency)
      .filter(([_, count]) => count >= Math.ceil(validAnalyses.length / 2))
      .map(([tag, _]) => tag);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
    const overallScore = Object.values(averageScores).length > 0 
      ? Math.round(Object.values(averageScores).reduce((sum, val) => sum + val, 0) / Object.values(averageScores).length)
      : undefined;
    
    return {
      scores: averageScores,
      tags: frequentTags,
      overall_score: overallScore
    };
  };
  
  const voiceAnalysis = calculateAverageVoiceAnalysis(answers);
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ä–µ—á–∏
  const calculateVoiceAverage = () => {
    if (!voiceAnalysis?.scores) return 0;
    
    const speechMetrics = ['communication', 'confidence', 'energy', 'stress_resistance'];
    const values = speechMetrics
      .map(metric => voiceAnalysis.scores[metric])
      .filter(value => value !== undefined && value !== null);
    
    if (values.length === 0) return 0;
    
    return Math.round(values.reduce((sum, val) => sum + val, 0) / values.length);
  };
  
  const voiceAverageScore = calculateVoiceAverage();
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalQuestions = answers.length;
  const answersWithVoiceAnalysis = answers.filter((answer: any) => answer.voice_analysis).length;
  const avgAnswerLength = answers.length > 0 
    ? Math.round(answers.reduce((sum: number, answer: any) => sum + (answer.answer_text?.length || 0), 0) / answers.length)
    : 0;

  // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Ñ–æ—Ä–º—É–ª–µ: 0.8 * –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ + 0.2 * —Ä–µ–∑—é–º–µ
  const calculatedInterviewScore = Math.round(0.8 * aiInterviewScore + 0.2 * resumeScore);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ: 0.2 * —Ä–µ–∑—é–º–µ + 0.8 * –∏–Ω—Ç–µ—Ä–≤—å—é
  const overallScore = Math.round(0.2 * resumeScore + 0.8 * calculatedInterviewScore);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  const getCandidateLevel = (score: number) => {
    if (score >= 85) return { level: '–û—Ç–ª–∏—á–Ω–æ', color: 'text-green-400', bg: 'bg-green-500/20' };
    if (score >= 70) return { level: '–•–æ—Ä–æ—à–æ', color: 'text-blue-400', bg: 'bg-blue-500/20' };
    if (score >= 55) return { level: '–°—Ä–µ–¥–Ω–µ', color: 'text-yellow-400', bg: 'bg-yellow-500/20' };
    if (score >= 40) return { level: '–°–ª–∞–±–æ', color: 'text-orange-400', bg: 'bg-orange-500/20' };
    return { level: '–ü–ª–æ—Ö–æ', color: 'text-red-400', bg: 'bg-red-500/20' };
  };

  const candidateLevel = getCandidateLevel(overallScore);

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <div className="bg-gradient-to-r from-dark-800/50 to-dark-700/50 p-6 rounded-2xl border border-dark-600/30">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h3 className="text-xl font-semibold text-white mb-2">–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥—ç—à–±–æ—Ä–¥</h3>
            <p className="text-dark-300">–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</p>
          </div>
          <div className={`px-4 py-2 rounded-lg ${candidateLevel.bg} ${candidateLevel.color}`}>
            <span className="font-semibold">{candidateLevel.level}</span>
          </div>
        </div>
        
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div className="text-center">
            <div className="text-3xl font-bold text-white mb-1">{overallScore}%</div>
            <div className="text-sm text-dark-300">–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-white mb-1">{resumeScore}%</div>
            <div className="text-sm text-dark-300">–†–µ–∑—é–º–µ</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-white mb-1">
              {aiInterviewScore > 0 ? `${Math.round(aiInterviewScore)}%` : 'N/A'}
            </div>
            <div className="text-sm text-dark-300">–ò–Ω—Ç–µ—Ä–≤—å—é</div>
            {aiInterviewScore === 0 && (
              <div className="text-xs text-dark-400 mt-1">–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
            )}
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-white mb-1">{totalQuestions}</div>
            <div className="text-sm text-dark-300">–í–æ–ø—Ä–æ—Å–æ–≤</div>
          </div>
        </div>
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –û—Ü–µ–Ω–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ */}
        <div className="bg-dark-800/50 p-6 rounded-2xl border border-dark-600/30">
          <div className="flex items-center justify-between mb-4">
            <h4 className="text-lg font-semibold text-white flex items-center">
              <svg className="w-5 h-5 mr-2 text-accent-blue" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z"/>
              </svg>
              –û—Ü–µ–Ω–∫–∏ –Ω–∞–≤—ã–∫–æ–≤
            </h4>
            <div className="text-xs text-dark-400 bg-dark-700/50 px-2 py-1 rounded">
              –†–µ–∑—é–º–µ ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤—å—é ‚Ä¢ –û–±—â–∞—è ‚Ä¢ –†–µ—á—å
            </div>
          </div>
          <div className="grid grid-cols-2 gap-8 py-8">
            <div className="flex justify-center items-center h-32">
              <RadialProgress 
                value={resumeScore} 
                max={100} 
                color="text-emerald-500" 
                label="–†–µ–∑—é–º–µ" 
              />
            </div>
            <div className="flex justify-center items-center h-32">
              <RadialProgress 
                value={aiInterviewScore > 0 ? Math.round(aiInterviewScore) : 0} 
                max={100} 
                color="text-purple-500" 
                label={aiInterviewScore > 0 ? "–ò–Ω—Ç–µ—Ä–≤—å—é" : "–ò–Ω—Ç–µ—Ä–≤—å—é (N/A)"} 
              />
            </div>
            <div className="flex justify-center items-center h-32">
              <RadialProgress 
                value={overallScore} 
                max={100} 
                color="text-accent-blue" 
                label="–û–±—â–∞—è" 
              />
            </div>
            <div className="flex justify-center items-center h-32">
              <RadialProgress 
                value={voiceAverageScore} 
                max={100} 
                color="text-orange-500" 
                label={voiceAverageScore > 0 ? "–†–µ—á—å" : "–†–µ—á—å (N/A)"} 
              />
            </div>
          </div>
        </div>

        {/* –ì–æ–ª–æ—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ */}
        <div className="bg-dark-800/50 p-6 rounded-2xl border border-dark-600/30">
          <div className="flex items-center justify-between mb-4">
            <h4 className="text-lg font-semibold text-white flex items-center">
              <svg className="w-5 h-5 mr-2 text-accent-blue" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z"/>
                <path d="M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z"/>
              </svg>
              –ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏
            </h4>
            {voiceAnalysis && (
              <div className="text-xs text-dark-400 bg-dark-700/50 px-2 py-1 rounded">
                –°—Ä–µ–¥–Ω–µ–µ –∏–∑ {answersWithVoiceAnalysis} –æ—Ç–≤–µ—Ç–æ–≤
              </div>
            )}
          </div>
          {voiceAnalysis ? (
            <VoiceAnalysisChart voiceAnalysis={voiceAnalysis} />
          ) : (
            <div className="text-center py-8">
              <p className="text-dark-300">–î–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
              {totalQuestions > 0 && (
                <p className="text-dark-400 text-sm mt-2">
                  –ò–∑ {totalQuestions} –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∏ –æ–¥–∏–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                </p>
              )}
            </div>
          )}
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ */}
      <div className="bg-dark-800/50 p-6 rounded-2xl border border-dark-600/30">
        <h4 className="text-lg font-semibold text-white mb-4 flex items-center">
          <svg className="w-5 h-5 mr-2 text-accent-blue" fill="currentColor" viewBox="0 0 24 24">
            <path d="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z"/>
          </svg>
          –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
        </h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="text-center">
            <div className="text-2xl font-bold text-white mb-2">{totalQuestions}</div>
            <div className="text-sm text-dark-300">–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-white mb-2">{avgAnswerLength}</div>
            <div className="text-sm text-dark-300">–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-white mb-2">
              {candidate.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : 
               candidate.status === 'active' ? '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' : 
               candidate.status === 'rejected' ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            </div>
            <div className="text-sm text-dark-300">–°—Ç–∞—Ç—É—Å</div>
          </div>
        </div>
      </div>

      {/* –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º */}
      {candidate.interview_analysis && (
        <div className="bg-gradient-to-r from-green-500/10 to-blue-500/10 p-6 rounded-2xl border border-green-500/30">
          <h4 className="text-lg font-semibold text-white mb-6 flex items-center">
            <svg className="w-5 h-5 mr-2 text-green-400" fill="currentColor" viewBox="0 0 24 24">
              <path d="M16,6L18.29,8.29L13.41,13.17L9.41,9.17L2,16.59L3.41,18L9.41,12L13.41,16L19.71,9.71L22,12V6H16Z"/>
            </svg>
            –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
          </h4>
          {(() => {
            const analytics = getCandidateTopicAnalytics(candidate);
            console.log('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', {
              candidateName: candidate.user_name,
              topicsCount: analytics.topics.length,
              topics: analytics.topics,
              averageByTopic: analytics.averageByTopic
            });
            return (
              <TopicAnalyticsDashboard 
                analytics={analytics}
                candidateName={candidate.user_name}
              />
            );
          })()}
        </div>
      )}

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è AI */}
      {candidate.interview_result?.recommendation && (
        <div className="bg-gradient-to-r from-accent-blue/10 to-purple-500/10 p-6 rounded-2xl border border-accent-blue/30">
          <h4 className="text-lg font-semibold text-white mb-4 flex items-center">
            <svg className="w-5 h-5 mr-2 text-accent-blue" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4M11,16.5L6.5,12L7.91,10.59L11,13.67L16.59,8.09L18,9.5L11,16.5Z"/>
            </svg>
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è AI
          </h4>
          <div className="bg-dark-800/50 p-4 rounded-lg">
            <p className="text-dark-300 leading-relaxed">
              {getOverallAssessment(candidate.interview_analysis) || 
               (typeof candidate.interview_result.recommendation === 'string' 
                ? candidate.interview_result.recommendation 
                : JSON.stringify(candidate.interview_result.recommendation, null, 2))
              }
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default CandidateDashboard;
